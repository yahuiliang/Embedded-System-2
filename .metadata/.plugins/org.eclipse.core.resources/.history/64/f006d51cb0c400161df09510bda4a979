#include "lcd_api.h"
#include "delay_api.h"
#include <inttypes.h>
#include <stdio.h>

void init_GPIOB();
void init_GPIOC();
void init_GPIOx_clock(char);
void init_PB0_to_PB2_mode();
void init_PC7_to_PC11_mode();
void lcd_set_up();
void lcd_cmd(uint8_t);
//void lcd_data(uint8_t);
void lcd_exec(uint8_t);
void lcd_set_upper_nibble(uint8_t);
void lcd_set_lower_nibble(uint8_t);
void lcd_latch();

void lcd_init() {
	init_GPIOB();
	init_GPIOC();
	lcd_set_up();
}

void lcd_clear() {
	uint8_t cmd = 1;
	lcd_cmd(cmd);
	delay_ms(2);
}

void lcd_home() {
	uint8_t cmd = 0b10;
	lcd_cmd(cmd);
	delay_ms(2);
}

void lcd_set_position(uint8_t row, uint8_t col) {
	uint8_t ddrm_adr = col;
	ddrm_adr += row * 0x40;
	uint8_t cmd = (1 << 7) + ddrm_adr;
	lcd_cmd(cmd);
}

int lcd_print_string(char string[]) {
	int str_len = strlen(string);
	for (int i = 0; i < str_len; i++) {
		lcd_data(string[i]);
	}
	return str_len;
}

void lcd_print_num(uint32_t num) {
	char num_str[];
	sprintf(num_str, "d", num);
	lcd_print_string(str);
}

void init_GPIOB() {
	init_GPIOx_clock('B');
	init_PB0_to_PB2_mode();
}

void init_GPIOC() {
	init_GPIOx_clock('C');
	init_PC7_to_PC11_mode();
}

void init_GPIOx_clock(char port) {
	/* enable the clock */
	volatile uint32_t* rcc_ahb1enr;
	rcc_ahb1enr = (uint32_t*) RCC_AHB1ENR;
	if (port == 'B') {
		*rcc_ahb1enr |= GPIOBEN;
	} else if (port == 'C') {
		*rcc_ahb1enr |= GPIOCEN;
	}
}

void init_PB0_to_PB2_mode() {
	volatile uint32_t* gpiob_base;
	gpiob_base = (uint32_t*) GPIOB_BASE;
	for (int bit = 0; bit < 3; bit++) {
		gpiob_base[MODER] &= ~(0b11 << (bit * 2)); // make sure all bits are set to zero.
		gpiob_base[MODER] |= OUTPUT << (bit * 2); // set mode from PB0 to PB2 to output mode.
	}
}

void init_PC7_to_PC11_mode() {
	volatile uint32_t* gpioc_base;
	gpioc_base = (uint32_t*) GPIOC_BASE;
	for (int bit = 8; bit < 12; bit++) {
		gpioc_base[MODER] &= ~(0b11 << (bit * 2)); // make sure all bits are set to zero.
		gpioc_base[MODER] |= OUTPUT << (bit * 2); // set mode from PC7 to PC11 to output mode.
	}
}

void lcd_set_up() {
	delay_ms(100); // delay more than 40ms.
	lcd_cmd(0x28);
	lcd_cmd(0x01);
	delay_us(1500);
	lcd_cmd(0x02);
	delay_us(1500);
	lcd_cmd(0x06);
	lcd_cmd(0x0C);
}

void lcd_cmd(uint8_t cmd) {
	volatile uint32_t* gpiob_base;
	gpiob_base = (uint32_t*) GPIOB_BASE;
	uint32_t rw_rs_clr = RS_CLR | RW_CLR;
	/* make sure RS and RW are cleared to be 0 */
	gpiob_base[BSRR] |= rw_rs_clr;
	lcd_exec(cmd);
}

void lcd_data(uint8_t data) {
	volatile uint32_t* gpiob_base;
	gpiob_base = (uint32_t*) GPIOB_BASE;
	uint32_t rw_rs_clr = RS_SET | RW_CLR;
	/* set RS and clear RW in order to write data to it */
	gpiob_base[BSRR] |= rw_rs_clr;
	lcd_exec(data);
}

void lcd_exec(uint8_t cmd) {
	lcd_set_upper_nibble(cmd);
	lcd_latch();
	lcd_set_lower_nibble(cmd);
	lcd_latch();
	delay_us(40);
}

void lcd_set_upper_nibble(uint8_t cmd) {
	volatile uint32_t* gpioc_base;
	gpioc_base = (uint32_t*) GPIOC_BASE;
	uint16_t upper_half_cmd = (cmd & ~0xF) >> 4;
	gpioc_base[BSRR] |= 0b1111 << (8 + 16); // clear instruction bits previously hold by the register.
	gpioc_base[BSRR] |= upper_half_cmd << 8;
}

void lcd_set_lower_nibble(uint8_t cmd) {
	volatile uint32_t* gpioc_base;
	gpioc_base = (uint32_t*) GPIOC_BASE;
	uint16_t lower_half_cmd = cmd & ~(0xF << 4);
	gpioc_base[BSRR] |= 0b1111 << (8 + 16); // clear instruction bits previously hold by the register.
	gpioc_base[BSRR] |= lower_half_cmd << 8;
}

void lcd_latch() {
	volatile uint32_t* gpiob_base;
	gpiob_base = (uint32_t*) GPIOB_BASE;
	gpiob_base[BSRR] |= E_SET;
	delay_us(1);
	gpiob_base[BSRR] |= E_CLR;
	delay_us(1);
}
